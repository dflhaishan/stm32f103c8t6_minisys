<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [demo1\mr-library.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image demo1\mr-library.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Apr 16 22:42:01 2024
<BR><P>
<H3>Maximum Stack Usage =        500 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
msh_cmd_dread &rArr; mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[22]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">BusFault_Handler</a><BR>
 <LI><a href="#[c8]">mr_dev_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">mr_printf</a><BR>
 <LI><a href="#[b8]">dev_lock_take</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8]">dev_lock_take</a><BR>
 <LI><a href="#[b7]">dev_lock_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b7]">dev_lock_release</a><BR>
 <LI><a href="#[c4]">mr_dev_open</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">mr_printf</a><BR>
 <LI><a href="#[b9]">dev_open</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9]">dev_open</a><BR>
 <LI><a href="#[b1]">dev_find_by_path</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b1]">dev_find_by_path</a><BR>
 <LI><a href="#[20]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">HardFault_Handler</a><BR>
 <LI><a href="#[21]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">MemManage_Handler</a><BR>
 <LI><a href="#[1f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">NMI_Handler</a><BR>
 <LI><a href="#[23]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">UsageFault_Handler</a><BR>
 <LI><a href="#[ae]">dev_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae]">dev_close</a><BR>
 <LI><a href="#[b4]">dev_get_path</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4]">dev_get_path</a><BR>
 <LI><a href="#[f2]">msh_dlist_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f2]">msh_dlist_tree</a><BR>
 <LI><a href="#[ba]">dev_register_by_path</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ba]">dev_register_by_path</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3d]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[39]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">EXTI0_IRQHandler</a> from drv_pin_1.o(i.EXTI0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[50]">EXTI15_10_IRQHandler</a> from drv_pin_1.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">EXTI1_IRQHandler</a> from drv_pin_1.o(i.EXTI1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">EXTI2_IRQHandler</a> from drv_pin_1.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">EXTI3_IRQHandler</a> from drv_pin_1.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI4_IRQHandler</a> from drv_pin_1.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3f]">EXTI9_5_IRQHandler</a> from drv_pin_1.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[48]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[47]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4a]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[49]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[51]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4b]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4c]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[2a]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[40]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4d]">USART1_IRQHandler</a> from drv_serial_1.o(i.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4e]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4f]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[52]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[55]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[57]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[58]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[56]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[5a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[5a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[16]">drv_pin_configure</a> from drv_pin_1.o(i.drv_pin_configure) referenced 2 times from drv_pin_1.o(.data)
 <LI><a href="#[5d]">drv_pin_init</a> from drv_pin_1.o(i.drv_pin_init) referenced from drv_pin_1.o(mr_auto_init.2)
 <LI><a href="#[17]">drv_pin_read</a> from drv_pin_1.o(i.drv_pin_read) referenced 2 times from drv_pin_1.o(.data)
 <LI><a href="#[18]">drv_pin_write</a> from drv_pin_1.o(i.drv_pin_write) referenced 2 times from drv_pin_1.o(.data)
 <LI><a href="#[19]">drv_serial_configure</a> from drv_serial_1.o(i.drv_serial_configure) referenced 2 times from drv_serial_1.o(.data)
 <LI><a href="#[5e]">drv_serial_init</a> from drv_serial_1.o(i.drv_serial_init) referenced from drv_serial_1.o(mr_auto_init.2)
 <LI><a href="#[1a]">drv_serial_read</a> from drv_serial_1.o(i.drv_serial_read) referenced 2 times from drv_serial_1.o(.data)
 <LI><a href="#[1c]">drv_serial_start_tx</a> from drv_serial_1.o(i.drv_serial_start_tx) referenced 2 times from drv_serial_1.o(.data)
 <LI><a href="#[1d]">drv_serial_stop_tx</a> from drv_serial_1.o(i.drv_serial_stop_tx) referenced 2 times from drv_serial_1.o(.data)
 <LI><a href="#[1b]">drv_serial_write</a> from drv_serial_1.o(i.drv_serial_write) referenced 2 times from drv_serial_1.o(.data)
 <LI><a href="#[62]">end</a> from service.o(i.end) referenced from service.o(mr_auto_init.5.end)
 <LI><a href="#[59]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[60]">led_key_init</a> from main.o(i.led_key_init) referenced from main.o(mr_auto_init.4)
 <LI><a href="#[53]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5c]">mr_heap_init</a> from memory.o(i.mr_heap_init) referenced from memory.o(mr_auto_init.1)
 <LI><a href="#[5f]">mr_msh_init</a> from msh.o(i.mr_msh_init) referenced from msh.o(mr_auto_init.3)
 <LI><a href="#[b]">mr_pin_close</a> from pin.o(i.mr_pin_close) referenced 2 times from pin.o(.data)
 <LI><a href="#[e]">mr_pin_ioctl</a> from pin.o(i.mr_pin_ioctl) referenced 2 times from pin.o(.data)
 <LI><a href="#[f]">mr_pin_isr</a> from pin.o(i.mr_pin_isr) referenced 2 times from pin.o(.data)
 <LI><a href="#[c]">mr_pin_read</a> from pin.o(i.mr_pin_read) referenced 2 times from pin.o(.data)
 <LI><a href="#[d]">mr_pin_write</a> from pin.o(i.mr_pin_write) referenced 2 times from pin.o(.data)
 <LI><a href="#[11]">mr_serial_close</a> from serial.o(i.mr_serial_close) referenced 2 times from serial.o(.data)
 <LI><a href="#[14]">mr_serial_ioctl</a> from serial.o(i.mr_serial_ioctl) referenced 2 times from serial.o(.data)
 <LI><a href="#[15]">mr_serial_isr</a> from serial.o(i.mr_serial_isr) referenced 2 times from serial.o(.data)
 <LI><a href="#[10]">mr_serial_open</a> from serial.o(i.mr_serial_open) referenced 2 times from serial.o(.data)
 <LI><a href="#[12]">mr_serial_read</a> from serial.o(i.mr_serial_read) referenced 2 times from serial.o(.data)
 <LI><a href="#[13]">mr_serial_write</a> from serial.o(i.mr_serial_write) referenced 2 times from serial.o(.data)
 <LI><a href="#[64]">msh_cmd_clear</a> from msh.o(i.msh_cmd_clear) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[6a]">msh_cmd_dclose</a> from msh_device.o(i.msh_cmd_dclose) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[6b]">msh_cmd_dioctl</a> from msh_device.o(i.msh_cmd_dioctl) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[67]">msh_cmd_dlist</a> from msh_device.o(i.msh_cmd_dlist) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[69]">msh_cmd_dopen</a> from msh_device.o(i.msh_cmd_dopen) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[6c]">msh_cmd_dread</a> from msh_device.o(i.msh_cmd_dread) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[68]">msh_cmd_dselect</a> from msh_device.o(i.msh_cmd_dselect) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[6d]">msh_cmd_dwrite</a> from msh_device.o(i.msh_cmd_dwrite) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[66]">msh_cmd_echo</a> from msh.o(i.msh_cmd_echo) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[63]">msh_cmd_help</a> from msh.o(i.msh_cmd_help) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[65]">msh_cmd_logo</a> from msh.o(i.msh_cmd_logo) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[1]">msh_key_backspace</a> from msh.o(i.msh_key_backspace) referenced 2 times from msh.o(.data)
 <LI><a href="#[7]">msh_key_delete</a> from msh.o(i.msh_key_delete) referenced 2 times from msh.o(.data)
 <LI><a href="#[6]">msh_key_down</a> from msh.o(i.msh_key_down) referenced 2 times from msh.o(.data)
 <LI><a href="#[0]">msh_key_enter</a> from msh.o(i.msh_key_enter) referenced 2 times from msh.o(.data)
 <LI><a href="#[3]">msh_key_left</a> from msh.o(i.msh_key_left) referenced 2 times from msh.o(.data)
 <LI><a href="#[4]">msh_key_right</a> from msh.o(i.msh_key_right) referenced 2 times from msh.o(.data)
 <LI><a href="#[2]">msh_key_table</a> from msh.o(i.msh_key_table) referenced 2 times from msh.o(.data)
 <LI><a href="#[5]">msh_key_up</a> from msh.o(i.msh_key_up) referenced 2 times from msh.o(.data)
 <LI><a href="#[8]">msh_printf_1</a> from msh_device.o(i.msh_printf_1) referenced 2 times from msh_device.o(.data)
 <LI><a href="#[9]">msh_printf_2</a> from msh_device.o(i.msh_printf_2) referenced 2 times from msh_device.o(.data)
 <LI><a href="#[a]">msh_printf_4</a> from msh_device.o(i.msh_printf_4) referenced 2 times from msh_device.o(.data)
 <LI><a href="#[61]">serial_init</a> from main.o(i.serial_init) referenced from main.o(mr_auto_init.4)
 <LI><a href="#[5b]">start</a> from service.o(i.start) referenced from service.o(mr_auto_init.0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[84]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fe]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[100]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[101]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[102]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_history_push
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_close
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_cmd
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b2]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_up
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_history_pop_next
</UL>

<P><STRONG><a name="[af]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_cmd
</UL>

<P><STRONG><a name="[b5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_cmd
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_up
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_table
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_history_pop_next
</UL>

<P><STRONG><a name="[ea]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strflags
</UL>

<P><STRONG><a name="[b0]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_child
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_key
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_cmd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_table
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_history_push
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_echo
</UL>

<P><STRONG><a name="[73]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[75]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[86]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[74]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[56]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[109]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[10a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>__vfscanf</STRONG> (Thumb, 810 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[7e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[85]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[10c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin_1.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = EXTI0_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, drv_pin_1.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = EXTI15_10_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin_1.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = EXTI1_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin_1.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = EXTI2_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin_1.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = EXTI3_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin_1.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = EXTI4_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_pin_1.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = EXTI9_5_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_delay_ms
</UL>

<P><STRONG><a name="[99]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[c1]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
</UL>

<P><STRONG><a name="[89]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[9a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8a]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[be]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[8f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[8b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[92]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[94]"></a>HAL_UART_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
</UL>

<P><STRONG><a name="[96]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
</UL>

<P><STRONG><a name="[95]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[97]"></a>HAL_UART_MspInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, main.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[20]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SystemClock_Config</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_serial_1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = USART1_IRQHandler &rArr; drv_serial_isr &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10e]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[b6]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
</UL>

<P><STRONG><a name="[10f]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[110]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[a2]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[111]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[112]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[113]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[d9]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>

<P><STRONG><a name="[114]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[115]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[116]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a5]"></a>_mr_fast_pin_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fast_pin.o(i._mr_fast_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mr_fast_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fast_pin_dev_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
</UL>

<P><STRONG><a name="[60]"></a>led_key_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(i.led_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = led_key_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(mr_auto_init.4)
</UL>
<P><STRONG><a name="[53]"></a>main</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = main &rArr; mr_msh_handle &rArr; mr_msh_input &rArr; mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_delay_ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_auto_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c9]"></a>mr_auto_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, service.o(i.mr_auto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_auto_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>mr_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mr_board_1.o(i.mr_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_delay_ms &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>mr_dev_close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, device.o(i.mr_dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_dev_close &rArr; dev_close &rArr;  dev_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[c7]"></a>mr_dev_ioctl</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, device.o(i.mr_dev_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mr_dev_ioctl &rArr; dev_lock_take &rArr;  dev_lock_take (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_remove
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_insert_before
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_key_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
</UL>

<P><STRONG><a name="[87]"></a>mr_dev_isr</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, device.o(i.mr_dev_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_isr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>mr_dev_open</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, device.o(i.mr_dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_open
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_key_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf_output
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_input
</UL>

<P><STRONG><a name="[cf]"></a>mr_dev_read</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, device.o(i.mr_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_input
</UL>

<P><STRONG><a name="[d0]"></a>mr_dev_register</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, device.o(i.mr_dev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
</UL>

<P><STRONG><a name="[c8]"></a>mr_dev_write</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, device.o(i.mr_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = mr_dev_write &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_key_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf_output
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf_output
</UL>

<P><STRONG><a name="[d1]"></a>mr_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, memory.o(i.mr_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mr_free &rArr; heap_insert_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_insert_block
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>

<P><STRONG><a name="[cd]"></a>mr_interrupt_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.mr_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
</UL>

<P><STRONG><a name="[ce]"></a>mr_interrupt_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.mr_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
</UL>

<P><STRONG><a name="[d3]"></a>mr_malloc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, memory.o(i.mr_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mr_malloc &rArr; heap_insert_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_insert_block
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>

<P><STRONG><a name="[ca]"></a>mr_msh_handle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh.o(i.mr_msh_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mr_msh_handle &rArr; mr_msh_input &rArr; mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_input
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_key
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_insert_char
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>mr_msh_input</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, msh.o(i.mr_msh_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mr_msh_input &rArr; mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_handle
</UL>

<P><STRONG><a name="[d7]"></a>mr_msh_printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, msh.o(i.mr_msh_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf_output
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_printf_4
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_printf_2
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_printf_1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_refresh_line
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_new_current_line
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_move_cursor_right
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_left
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_insert_char
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_delete_char
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_logo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_help
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_echo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_clear
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_init
</UL>

<P><STRONG><a name="[da]"></a>mr_msh_printf_output</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, msh.o(i.mr_msh_printf_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>

<P><STRONG><a name="[eb]"></a>mr_msh_set_prompt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msh.o(i.mr_msh_set_prompt))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[c0]"></a>mr_pin_register</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pin.o(i.mr_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mr_pin_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mr_fast_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
</UL>

<P><STRONG><a name="[c6]"></a>mr_printf</STRONG> (Thumb, 40 bytes, Stack size 152 bytes, service.o(i.mr_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf_output
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_key_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_reset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_pop
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
</UL>

<P><STRONG><a name="[db]"></a>mr_printf_output</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, service.o(i.mr_printf_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>

<P><STRONG><a name="[dc]"></a>mr_ringbuf_allocate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_reset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_open
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
</UL>

<P><STRONG><a name="[e0]"></a>mr_ringbuf_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mr_ringbuf_free &rArr; mr_ringbuf_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_close
</UL>

<P><STRONG><a name="[dd]"></a>mr_ringbuf_get_bufsz</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_get_bufsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mr_ringbuf_get_bufsz &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_read
</UL>

<P><STRONG><a name="[e1]"></a>mr_ringbuf_get_data_size</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_get_data_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_pop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
</UL>

<P><STRONG><a name="[e2]"></a>mr_ringbuf_get_space_size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_get_space_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
</UL>

<P><STRONG><a name="[df]"></a>mr_ringbuf_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mr_ringbuf_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
</UL>

<P><STRONG><a name="[e3]"></a>mr_ringbuf_pop</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mr_ringbuf_pop &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_isr
</UL>

<P><STRONG><a name="[e4]"></a>mr_ringbuf_push_force</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_push_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mr_ringbuf_push_force &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_isr
</UL>

<P><STRONG><a name="[e5]"></a>mr_ringbuf_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mr_ringbuf_read &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_read
</UL>

<P><STRONG><a name="[de]"></a>mr_ringbuf_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
</UL>

<P><STRONG><a name="[e7]"></a>mr_ringbuf_write</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mr_ringbuf_write &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_write
</UL>

<P><STRONG><a name="[c3]"></a>mr_serial_register</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, serial.o(i.mr_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mr_serial_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_init
</UL>

<P><STRONG><a name="[c5]"></a>mr_strerror</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, service.o(i.mr_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_key_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[e9]"></a>mr_strflags</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, service.o(i.mr_strflags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mr_strflags
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
</UL>

<P><STRONG><a name="[f5]"></a>msh_dev_get_path</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device.o(i.msh_dev_get_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msh_dev_get_path &rArr; dev_get_path &rArr;  dev_get_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
</UL>

<P><STRONG><a name="[f2]"></a>msh_dlist_tree</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, device.o(i.msh_dlist_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + In Cycle
<LI>Call Chain = msh_dlist_tree &rArr;  msh_dlist_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strflags
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dlist
</UL>

<P><STRONG><a name="[f1]"></a>msh_get_root</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(i.msh_get_root))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dlist
</UL>

<P><STRONG><a name="[61]"></a>serial_init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, main.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = serial_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(mr_auto_init.4)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[90]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[98]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[5f]"></a>mr_msh_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, msh.o(i.mr_msh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = mr_msh_init &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_new_current_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_auto_init.3)
</UL>
<P><STRONG><a name="[64]"></a>msh_cmd_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msh.o(i.msh_cmd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = msh_cmd_clear &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[66]"></a>msh_cmd_echo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, msh.o(i.msh_cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msh_cmd_echo &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[63]"></a>msh_cmd_help</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh.o(i.msh_cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msh_cmd_help &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[65]"></a>msh_cmd_logo</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, msh.o(i.msh_cmd_logo))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = msh_cmd_logo &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[f4]"></a>msh_delete_char</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, msh.o(i.msh_delete_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = msh_delete_char &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_delete
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_backspace
</UL>

<P><STRONG><a name="[f6]"></a>msh_history_pop_next</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msh.o(i.msh_history_pop_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_history_pop_next &rArr; msh_refresh_line &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_refresh_line
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_down
</UL>

<P><STRONG><a name="[f8]"></a>msh_history_push</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, msh.o(i.msh_history_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = msh_history_push &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_enter
</UL>

<P><STRONG><a name="[d6]"></a>msh_insert_char</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, msh.o(i.msh_insert_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msh_insert_char &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_handle
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_table
</UL>

<P><STRONG><a name="[1]"></a>msh_key_backspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_key_backspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = msh_key_backspace &rArr; msh_delete_char &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_delete_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>msh_key_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, msh.o(i.msh_key_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msh_key_delete &rArr; msh_delete_char &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_move_cursor_right
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_delete_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>msh_key_down</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_key_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_key_down &rArr; msh_history_pop_next &rArr; msh_refresh_line &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_history_pop_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>msh_key_enter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, msh.o(i.msh_key_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = msh_key_enter &rArr; msh_parse_cmd &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_history_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>msh_key_left</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, msh.o(i.msh_key_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = msh_key_left &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>msh_key_right</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_key_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = msh_key_right &rArr; msh_move_cursor_right &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_move_cursor_right
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>msh_key_table</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, msh.o(i.msh_key_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_key_table &rArr; msh_insert_char &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_insert_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>msh_key_up</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, msh.o(i.msh_key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_key_up &rArr; msh_refresh_line &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_refresh_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>msh_move_cursor_right</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, msh.o(i.msh_move_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = msh_move_cursor_right &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_right
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_delete
</UL>

<P><STRONG><a name="[d8]"></a>msh_new_current_line</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, msh.o(i.msh_new_current_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = msh_new_current_line &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_parse_cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_init
</UL>

<P><STRONG><a name="[fa]"></a>msh_parse_cmd</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, msh.o(i.msh_parse_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = msh_parse_cmd &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_new_current_line
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_enter
</UL>

<P><STRONG><a name="[d4]"></a>msh_parse_key</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, msh.o(i.msh_parse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = msh_parse_key &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_handle
</UL>

<P><STRONG><a name="[f7]"></a>msh_refresh_line</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msh.o(i.msh_refresh_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = msh_refresh_line &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_key_up
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_history_pop_next
</UL>

<P><STRONG><a name="[6a]"></a>msh_cmd_dclose</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = msh_cmd_dclose &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_close
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_set_prompt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[6b]"></a>msh_cmd_dioctl</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = msh_cmd_dioctl &rArr; msh_dioctl_cmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[ee]"></a>msh_cmd_dioctl_cfg</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, msh_device.o(i.msh_cmd_dioctl_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = msh_cmd_dioctl_cfg &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[67]"></a>msh_cmd_dlist</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, msh_device.o(i.msh_cmd_dlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_cmd_dlist &rArr; msh_dlist_tree &rArr;  msh_dlist_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_root
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[69]"></a>msh_cmd_dopen</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msh_cmd_dopen &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strflags
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[6c]"></a>msh_cmd_dread</STRONG> (Thumb, 376 bytes, Stack size 160 bytes, msh_device.o(i.msh_cmd_dread))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = msh_cmd_dread &rArr; mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[68]"></a>msh_cmd_dselect</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = msh_cmd_dselect &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[6d]"></a>msh_cmd_dwrite</STRONG> (Thumb, 468 bytes, Stack size 176 bytes, msh_device.o(i.msh_cmd_dwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = msh_cmd_dwrite &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[ef]"></a>msh_dioctl_bufsz</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, msh_device.o(i.msh_dioctl_bufsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = msh_dioctl_bufsz &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[ec]"></a>msh_dioctl_cmd</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, msh_device.o(i.msh_dioctl_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = msh_dioctl_cmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[f0]"></a>msh_dioctl_datasz</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, msh_device.o(i.msh_dioctl_datasz))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msh_dioctl_datasz &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[ed]"></a>msh_dioctl_pos</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, msh_device.o(i.msh_dioctl_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = msh_dioctl_pos &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[8]"></a>msh_printf_1</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, msh_device.o(i.msh_printf_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_printf_1 &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>msh_printf_2</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh_device.o(i.msh_printf_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_printf_2 &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>msh_printf_4</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh_device.o(i.msh_printf_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_printf_4 &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>msh_update_path</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, msh_device.o(i.msh_update_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = msh_update_path &rArr; msh_dev_get_path &rArr; dev_get_path &rArr;  dev_get_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dev_get_path
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_set_prompt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
</UL>

<P><STRONG><a name="[a6]"></a>_fast_pin_dev_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fast_pin.o(i._fast_pin_dev_get))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mr_fast_pin_init
</UL>

<P><STRONG><a name="[b]"></a>mr_pin_close</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pin.o(i.mr_pin_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mr_pin_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>mr_pin_ioctl</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, pin.o(i.mr_pin_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_pin_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>mr_pin_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin.o(i.mr_pin_isr))
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>mr_pin_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, pin.o(i.mr_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mr_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>mr_pin_write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pin.o(i.mr_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mr_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>mr_serial_close</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, serial.o(i.mr_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mr_serial_close &rArr; mr_ringbuf_free &rArr; mr_ringbuf_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>mr_serial_ioctl</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, serial.o(i.mr_serial_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mr_serial_ioctl &rArr; mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_reset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>mr_serial_isr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, serial.o(i.mr_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mr_serial_isr &rArr; mr_ringbuf_push_force &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_pop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>mr_serial_open</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serial.o(i.mr_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mr_serial_open &rArr; mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>mr_serial_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, serial.o(i.mr_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mr_serial_read &rArr; mr_ringbuf_read &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>mr_serial_write</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, serial.o(i.mr_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mr_serial_write &rArr; mr_ringbuf_write &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>drv_pin_configure</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, drv_pin_1.o(i.drv_pin_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_pin_configure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_port_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_1.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>drv_pin_get_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_pin_1.o(i.drv_pin_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[bc]"></a>drv_pin_get_port_data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_pin_1.o(i.drv_pin_get_port_data))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[5d]"></a>drv_pin_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_pin_1.o(i.drv_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = drv_pin_init &rArr; mr_pin_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_1.o(mr_auto_init.2)
</UL>
<P><STRONG><a name="[17]"></a>drv_pin_read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_pin_1.o(i.drv_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_port_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_1.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>drv_pin_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_pin_1.o(i.drv_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_port_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin_1.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>drv_serial_configure</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, drv_serial_1.o(i.drv_serial_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drv_serial_configure &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_serial_1.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>drv_serial_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_serial_1.o(i.drv_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = drv_serial_init &rArr; mr_serial_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_serial_1.o(mr_auto_init.2)
</UL>
<P><STRONG><a name="[9f]"></a>drv_serial_isr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_serial_1.o(i.drv_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = drv_serial_isr &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>drv_serial_read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_serial_1.o(i.drv_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_serial_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_serial_1.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>drv_serial_start_tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_serial_1.o(i.drv_serial_start_tx))
<BR>[Address Reference Count : 1]<UL><LI> drv_serial_1.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>drv_serial_stop_tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_serial_1.o(i.drv_serial_stop_tx))
<BR>[Address Reference Count : 1]<UL><LI> drv_serial_1.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>drv_serial_write</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_serial_1.o(i.drv_serial_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_serial_1.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>desc_allocate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, device.o(i.desc_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = desc_allocate &rArr; dev_find &rArr; dev_find_by_path &rArr;  dev_find_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>

<P><STRONG><a name="[ac]"></a>desc_free</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, device.o(i.desc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = desc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_close
</UL>

<P><STRONG><a name="[ae]"></a>dev_close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, device.o(i.dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = dev_close &rArr;  dev_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_close
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_close
</UL>

<P><STRONG><a name="[ab]"></a>dev_find</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, device.o(i.dev_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = dev_find &rArr; dev_find_by_path &rArr;  dev_find_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_allocate
</UL>

<P><STRONG><a name="[b1]"></a>dev_find_by_path</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, device.o(i.dev_find_by_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = dev_find_by_path &rArr;  dev_find_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_child
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
</UL>

<P><STRONG><a name="[b3]"></a>dev_find_child</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, device.o(i.dev_find_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dev_find_child &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
</UL>

<P><STRONG><a name="[b4]"></a>dev_get_path</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, device.o(i.dev_get_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = dev_get_path &rArr;  dev_get_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dev_get_path
</UL>

<P><STRONG><a name="[b7]"></a>dev_lock_release</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, device.o(i.dev_lock_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = dev_lock_release &rArr;  dev_lock_release (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
</UL>

<P><STRONG><a name="[b8]"></a>dev_lock_take</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, device.o(i.dev_lock_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = dev_lock_take &rArr;  dev_lock_take (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
</UL>

<P><STRONG><a name="[b9]"></a>dev_open</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, device.o(i.dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = dev_open &rArr;  dev_open (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_open
</UL>

<P><STRONG><a name="[ba]"></a>dev_register_by_path</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, device.o(i.dev_register_by_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = dev_register_by_path &rArr;  dev_register_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_insert_before
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_child
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
</UL>

<P><STRONG><a name="[bb]"></a>mr_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device.o(i.mr_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
</UL>

<P><STRONG><a name="[ad]"></a>mr_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, device.o(i.mr_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_free
</UL>

<P><STRONG><a name="[d2]"></a>heap_insert_block</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, memory.o(i.heap_insert_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heap_insert_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
</UL>

<P><STRONG><a name="[5c]"></a>mr_heap_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, memory.o(i.mr_heap_init))
<BR>[Address Reference Count : 1]<UL><LI> memory.o(mr_auto_init.1)
</UL>
<P><STRONG><a name="[62]"></a>end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.end))
<BR>[Address Reference Count : 1]<UL><LI> service.o(mr_auto_init.5.end)
</UL>
<P><STRONG><a name="[5b]"></a>start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.start))
<BR>[Address Reference Count : 1]<UL><LI> service.o(mr_auto_init.0)
</UL>
<P><STRONG><a name="[a3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a1]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[a8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[58]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
